# -*- coding: utf-8 -*-
"""
"""

# Read in the README to serve as the long_description, which will be presented
# on pypi.org as the project description.

import os
import subprocess
from setuptools import setup, find_packages


# Change version number here, not in engram/version.py, which is generated
# by this script. Try to follow recommended versioning guidelines at semver.org.
MAJOR       = 0     # increment for backwards-incompatible changes
MINOR       = 0     # increment for backwards-compatible feature additions
MICRO       = 2     # increment for backwards-compatible bug fixes
IS_RELEASED = False # determines whether version will be marked as development
VERSION     = f'{MAJOR}.{MINOR}.{MICRO}'

# Try to fetch the git revision number from the .git directory if it exists,
# as well as whether the working directory is dirty or not.
if os.path.exists('.git'):
    try:
        out = subprocess.Popen(['git', 'rev-parse', 'HEAD'],
                               stdout=subprocess.PIPE).communicate()[0]
        GIT_REVISION = out.strip().decode('ascii')

        out = subprocess.Popen(['git', 'diff', '--stat'],
                               stdout=subprocess.PIPE).communicate()[0]
        if out.strip().decode('ascii'):
            GIT_DIRTY = True
        else:
            GIT_DIRTY = False
    except OSError:
        GIT_REVISION = 'unknown'
        GIT_DIRTY = None
# If the .git directory is absent (perhaps because this is a source distro), or
# if git is not available, try to fetch the rev number and dirty state from
# engram/version.py where it may have been stored during packaging.
elif os.path.exists('engram/version.py'):
    try:
        v = {}
        with open('engram/version.py', 'r') as f:
            exec(f.read(), v)
        GIT_REVISION = v['git_revision']
        GIT_DIRTY = v['git_dirty']
    except ImportError:
        raise ImportError('Unable to import git_revision. Try removing ' \
                          'engram/version.py and the build directory ' \
                          'before building.')
else:
    GIT_REVISION = 'unknown'
    GIT_DIRTY = None

# If this is not a release version, mark it as a development build/distro and
# tag it with the git revision number and dirty state.
if not IS_RELEASED:
    VERSION += '.dev0+git.' + GIT_REVISION[:7]
    if GIT_DIRTY:
        VERSION += '.dirty'

# Write the version string to a file that will be included with the
# build/distro. This makes the string accessible to the package via
# engram.__version__. The git revision and dirty state are also written in
# case a source distro is being built, so that they can be fetched later during
# installation.
with open('engram/version.py', 'w') as f:
    try:
        f.write('"""THIS FILE WAS GENERATED BY SETUP.PY DURING BUILDING/PACKAGING"""\n')
        f.write(f'version = \'{VERSION}\'\n')
        f.write(f'git_revision = \'{GIT_REVISION}\'\n')
        f.write(f'git_dirty = {GIT_DIRTY}\n')
    finally:
        f.close()

# Read in the README to serve as the long_description, which will be presented
# on pypi.org as the project description.
with open('README.md', 'r') as f:
    README = f.read()

with open('requirements.txt', 'r') as f:
    install_requires = f.read()

extras_require = {}
with open('requirements-docs.txt', 'r') as f:
    extras_require['docs'] = f.read()
with open('requirements-tests.txt', 'r') as f:
    extras_require['tests'] = f.read()


setup(
    name = 'engram',
    version = VERSION,
    description = 'Encoding Graphical Representations \
        of Activated Memories (ENGRAM)',
    packages = find_packages(),
    include_package_data = True,
    install_requires = install_requires,
    extras_require = extras_require,
    python_requires='==3.7.3',
    # entry_points = {'console_scripts': ['engram=engram.scripts:main']},
    long_description = README,
    long_description_content_type="text/markdown",
    keywords = ['neuroscience', 'electrophysiology', 'visualization'
                , 'open-science', 'BCI'],
    author="Garrett Flynn",
    author_email="garrett@garrettflynn.com",
    license = 'GPLv3',
    url="https://github.com/garrettmflynn/Engram",
    project_urls={
        'Documentation': 'https://engram.readthedocs.io',
        'Source code': 'https://github.com/garrettmflynn/engram',
        'Bug tracker': 'https://github.com/garrettmflynn/engram/issues',
    },
    classifiers = [
        'Development Status :: 1 - Planning',
        'Intended Audience :: Science/Research',
        "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
        'Operating System :: OS Independent',
        'Programming Language :: Python :: 3.7',
        'Topic :: Scientific/Engineering :: Visualization',
        'Topic :: Scientific/Engineering :: Human Machine Interfaces',
        'Topic :: Scientific/Engineering :: Artificial Intelligence',
    ],
)